#ifndef	__MATERIAL_H__
#define	__MATERIAL_H__

#include "..\..\GlobalDefs.h"
#include <RTmath.h>

RDPS_BEGIN
	FRWK_BEGIN
		
		class BRDF;
		/********************************************************************************************************************************************
		 *
		 * Classe Base para o material (todo material de herdar desta class), 
		 * nela um Componente BRDF com a informação do ambientMaterial,
		 * o tipo do material que sera enviado para o dispositivo,
		 * e um bool que indicara se existira calculo de sombra.
		 * para o dispositivo.
		 *
		 ********************************************************************************************************************************************/
		class Material
		{
		protected:
			BRDF *ambient;
			TypeMaterial type;
			bool shadow;

		public:
			/*---------------------------------------------------------------------------------------------------------------------------------------
			 * Construtor
			 * recebe um parametro que determina o tipo do material.
			 *---------------------------------------------------------------------------------------------------------------------------------------*/
			Material(const TypeMaterial _type);
			/*---------------------------------------------------------------------------------------------------------------------------------------
			 * Construtor
			 * recebe 3 parametros:
			 * -> uma cor;
			 * -> um multiplicador de potencia para a cor;
			 * -> tipo do material;
			 * A cor e float são para a criacao do Componete BRDF (ambient);
			 *---------------------------------------------------------------------------------------------------------------------------------------*/
			Material(const RT::Vec3f &color, 
					 const float _ambient,
				     const TypeMaterial _type);
			/*---------------------------------------------------------------------------------------------------------------------------------------
			 * Construtor
			 * recebe 2 parametros:
			 * -> BRDF (ambient)
			 * -> tipo do material.
			 *---------------------------------------------------------------------------------------------------------------------------------------*/
			Material(BRDF *_ambient,
				     const TypeMaterial _type);
			/*---------------------------------------------------------------------------------------------------------------------------------------
			 * Construtor de copia
			 *---------------------------------------------------------------------------------------------------------------------------------------*/
			Material(const Material &other);
			/*---------------------------------------------------------------------------------------------------------------------------------------
			 * Destrutor padrao
			 *---------------------------------------------------------------------------------------------------------------------------------------*/
			virtual ~Material();
			/*---------------------------------------------------------------------------------------------------------------------------------------
			 * Funcao auxiliar que gera uma copia do objeto.
			 * O filho desta classe deve reescrever esta funcao.
			 *---------------------------------------------------------------------------------------------------------------------------------------*/
			virtual Material *Clone() const = 0;
			/*---------------------------------------------------------------------------------------------------------------------------------------
			 * Funcao de sobrecarga de operador para copia.
			 *---------------------------------------------------------------------------------------------------------------------------------------*/
			Material &operator=(const Material &other);
			/*---------------------------------------------------------------------------------------------------------------------------------------
			 * Funcao auxiliar que retorna o Componente BRDF (ambient).
			 *---------------------------------------------------------------------------------------------------------------------------------------*/
			inline BRDF *GetAmbient() const { return ambient; }
			/*---------------------------------------------------------------------------------------------------------------------------------------
			 * Funcao auxiliar que retorna o shadow
			 *---------------------------------------------------------------------------------------------------------------------------------------*/
			inline bool GetShadow() const { return shadow; }
			/*---------------------------------------------------------------------------------------------------------------------------------------
			 * Funcao auxiliar para setar os dados do Componente BRDF (ambient).
			 *---------------------------------------------------------------------------------------------------------------------------------------*/
			Material &SetAmbient(BRDF *_ambient);
			/*---------------------------------------------------------------------------------------------------------------------------------------
			 * Funcao auxiliar para setar a cor do Componente BRDF (ambient),
			 * recebendo como parametro um vector3 (valores de 0 a 1).
			 * O filho desta classe deve reescrever esta funcao.
			 *---------------------------------------------------------------------------------------------------------------------------------------*/
			virtual Material &SetColor(const RT::Vec3f &color) = 0;
			/*---------------------------------------------------------------------------------------------------------------------------------------
			 * Funcao auxiliar para setar a cor do Componente BRDF (ambient),
			 * recebendo como parametro um 3 floats (r, g, b - valores de 0 a 1).
			 * O filho desta classe deve reescrever esta funcao.
			 *---------------------------------------------------------------------------------------------------------------------------------------*/
			virtual Material &SetColor(const float r, const float g, const float b) = 0;
			/*---------------------------------------------------------------------------------------------------------------------------------------
			 * Funcao auxiliar para setar o multiplicador de potencia para o Componenete BRDF (ambient).
			 *---------------------------------------------------------------------------------------------------------------------------------------*/
			Material &SetAmbientK(const float _ambient);
			/*---------------------------------------------------------------------------------------------------------------------------------------
			 * Funcao auxiliar para setar o shadow.
			 *---------------------------------------------------------------------------------------------------------------------------------------*/
			Material &SetShadow(const bool _shadow);

		};

	FRWK_END
RDPS_END

#endif//__MATERIAL_H__